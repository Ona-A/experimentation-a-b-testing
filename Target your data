Example code from the Experimentation: A/B testing course

We used the JS SDK and example code provided, that on the customers/account.liquid page to add a straightforward table to display each subscription,
we did this by creating an account-subscriptions.liquie snippet page, then adding additional code to the example.

Below is the example code from the JS SDK documentation plus the additional code that was created for the course.

<style>
  .visually-hidden {
    border: 0px;
    clip: rect(0px, 0px, 0px, 0px);
    width: 1px;
    height: 1px;
    margin: -1px;
    padding: 0px;
    overflow: hidden;
    white-space: nowrap;
    position: absolute;
  }

  @keyframes spinner {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  .subscriptions-table td.id {
    vertical-align: middle !important;
  }

  .subscriptions-loader {
    display: flex;
    justify-content: center;
    padding-top: 16px;
  }

  .subscriptions-loader__spinner {
    display: inline-block;
    border-top: 2px solid currentcolor;
    border-right: 2px solid currentcolor;
    border-bottom-style: solid;
    border-left-style: solid;
    border-radius: 99999px;
    border-bottom-width: 2px;
    border-left-width: 2px;
    border-bottom-color: transparent;
    border-left-color: transparent;
    animation: 0.45s linear 0s infinite normal none running spinner;
    width: var(--spinner-size);
    height: var(--spinner-size);
    --spinner-size: 5rem;
  }

  .subscriptions {
    width: 100%;
  }
</style>

<section class="subscriptions">
  <div>
    <h2>Subscriptions</h2>
    <account-subscriptions>
      <table class="subscriptions-table">
        <thead>
          <tr>
            <td>ID</td>
            <td>Product</td>
            <td>Quantity</td>
            <td>Next Charge</td>
            <td>Price</td>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
      <div class="subscriptions-loader">
        <div class="subscriptions-loader__spinner"><span class="visually-hidden">Loading...</span></div>
      </div>
    </account-subscriptions>
  </div>
</section>

<script>
  class AccountSubscriptions extends HTMLElement {
    selectors = {
      loader: '.subscriptions-loader',
      table: '.subscriptions-table',
    };

    constructor() {
      super();
      this.loadSubscriptions();
    }

    async login() {
      this.session = await recharge.auth.loginShopifyAppProxy();
    }

    async checkCustomerMetafields() {
      const customer = await recharge.customer.getCustomer(this.session, { include: ['metafields'] });
      if (customer.include.metafields.length > 0) {
         customer.include.metafields.forEach(metafield => {
            if (metafield.key == "segment") {
              const segmentInfo = JSON.parse(metafield.value);
              this.segment = segmentInfo.segment;
              this.updateCustomerMetafields(metafield.id,segmentInfo);
            }
         })
        }
    }
    
    async updateCustomerMetafields(metafieldId,segmentInfo){
      segmentInfo.login_counter = segmentInfo.login_counter + 1;
      segmentInfo.login_date = new Date();
      await recharge.metafield.updateMetafield(this.session, metafieldId, { value: JSON.stringify(segmentInfo) });
    }
    
    async loadSubscriptions() {
      this.setLoading(true);
      await this.login();
      await this.checkCustomerMetafields();
      const { subscriptions } = await recharge.subscription.listSubscriptions(this.session);
      subscriptions.forEach(subscription => {
        const tableBody = this.querySelector(`${this.selectors.table} tbody`);
        if (!tableBody) return;
        tableBody.append(this.createRow(subscription));
      });
      this.setLoading(false);
    }

    async changeSubscriptionDate(subscription) {
      let scheduledDate = new Date(subscription.next_charge_scheduled_at);
      scheduledDate.setDate(scheduledDate.getDate() + 7);      
      await recharge.subscription.updateSubscriptionChargeDate(this.session, subscription.id, scheduledDate);
      location.reload();
    }

    async setLoading(value) {
      const loader = this.querySelector(this.selectors.loader);
      if (!value && loader) {
        loader.remove();
      } else if (value) {
        const loadingEl = document.createElement('div');
        loadingEl.classList.add(this.selectors.loader.split('.')[1]);
        this.append(loadingEl);
      }
    }

    createRow(subscription) {
      const row = document.createElement('tr');

      const idCol = document.createElement('td');
      idCol.classList.add('id');
      idCol.innerHTML = subscription.id;
      row.append(idCol);

      const productCol = document.createElement('td');
      productCol.classList.add('product');
      productCol.innerHTML = subscription.product_title;
      row.append(productCol);

      const quantityCol = document.createElement('td');
      quantityCol.classList.add('subscription-quantity');
      quantityCol.innerHTML = subscription.quantity;
      row.append(quantityCol);

      const nextChargeCol = document.createElement('td');
      nextChargeCol.classList.add('next-charge-scheduled-at');
      nextChargeCol.innerHTML = subscription.next_charge_scheduled_at;
      row.append(nextChargeCol);

      const priceCol = document.createElement('td');
      priceCol.classList.add('price');
      priceCol.innerHTML = `$${subscription.price}`;
      row.append(priceCol);

      if (this.segment=="new"){
      const Skip_sub = document.createElement('button');
        Skip_sub.id = 'skip_sub';
        Skip_sub.classList.add('skip_sub');
        let delaysch = 'Delay by 7 days';
        Skip_sub.innerHTML = delaysch;
        row.append(Skip_sub);
        Skip_sub.addEventListener("click", () => {
          this.changeSubscriptionDate(subscription);
        })
      }
      return row;
    }
  }

  customElements.define('account-subscriptions', AccountSubscriptions);
</script>
